#!/usr/bin/perl
#
#
#
# tcp uptimer , check tcp port with kind of "send expect" analyzing system 
# if server was stale or down , it does restart the server 
#
#
#
use strict;
use warnings;
use IO::Socket::INET;


die "wrong syntax\nuptimer <hostname> <tcp port> <message to send> <message to expect> <daemon path> <timeout> <interval>\nfor example : uptimer 127.0.0.1 80 GET \"\" /usr/local/apache/bin/httpd 30 20\n" unless $ARGV[6];

my $host=$ARGV[0];
my $dport=$ARGV[1];

my $send_message=$ARGV[2];
my $expect_message=$ARGV[3];

my $timeout=$ARGV[5];
my $interval=$ARGV[6];

my $daemon_path=$ARGV[4];

my @nvalue = split ('/' , $daemon_path);
my $exec_name=$nvalue[-1];



my $wlog="/var/log/uptimer_"."$host"."_"."$dport";

my $EOL = "\015\012";

open WLOG,">$wlog" or die "unable to open log file : $! \n";
select WLOG; 
$|=1;
select STDOUT;

exit if fork;

while (1) {
    my $server=IO::Socket::INET->new (
				      Proto => 'tcp',
				      PeerAddr => $host,
				      PeerPort => $dport,
				      Timeout => $timeout ,   
				      ) or &warning ("Connection Failed \"$host\:$dport\" :$! .");
    our $iftimeout=0;
    if ($server) {
	alarm $timeout;
	local $SIG{ALRM} = sub { 
	    &warning ("TIMEOUT on \"$host:$dport\".");
	    $server->shutdown(2);
	    $iftimeout=1;

	};

	print $server "$send_message".$EOL;
	my @message = <$server>;

	close $server;

	my $matched;

	foreach (@message) {

	    if ($_ =~ /$expect_message/g) {
		alarm 0;
	    } else {
		&warning ("UNMATCHED on \"$host\" , sending \"$send_message\" and expect \"$expect_message\" but got \"@message\" .");
	    }
	}}


    sub warning {
	print WLOG ("!!! : ",scalar(localtime)," : $_[0]\n");
	system "killall -w httpd";
	system "$daemon_path";
	print WLOG ("!!! : ",scalar(localtime)," : Reloaded\n");
	return (0);
    }
    sleep $interval;

}
